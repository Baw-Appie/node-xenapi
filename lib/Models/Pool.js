// Generated by CoffeeScript 1.9.1
(function() {
  var Pool, Promise, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:Pool');

  Promise = require('bluebird');

  Pool = (function() {
    var key, pool, session, xenAPI;

    key = void 0;

    session = void 0;

    pool = void 0;

    xenAPI = void 0;


    /**
    * Construct Pool
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   pool - A JSON object representing this Pool
    * @param      {String}   key - The OpaqueRef handle to this Pool
     */

    function Pool(_session, _pool, _key, _xenAPI) {
      this.getDefaultSR = bind(this.getDefaultSR, this);
      debug("constructor()");
      debug(_pool);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_pool) {
        throw Error("Must provide `pool`");
      }
      if (!_key) {
        throw Error("Must provide `key`");
      }
      if (!_xenAPI) {
        throw Error("Must provide `xenAPI`");
      }
      session = _session;
      pool = _pool;
      key = _key;
      xenAPI = _xenAPI;
      this.uuid = pool.uuid;
      this.name = pool.name_label;
      this.description = pool.name_description;
    }

    Pool.prototype.getDefaultSR = function() {
      debug("getDefaultSR()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("pool.get_default_SR", [key]).then(function(value) {
            if (!value) {
              reject();
            }
            return xenAPI.srCollection.findOpaqueRef(value).then(function(sr) {
              return resolve(sr);
            })["catch"](function(e) {
              debug(e);
              if (e[0] === "HANDLE_INVALID") {
                return reject(new Error("Xen reported default SR, but none found. Is one set as default?"));
              } else {
                return reject(e);
              }
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return Pool;

  })();

  module.exports = Pool;

}).call(this);
