// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, Template, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:Template');

  Promise = require('bluebird');

  Template = (function() {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
    * Construct Template. Very similar to a VM, but not yet set up.
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   template - A JSON object representing this Template
    * @param      {String}   opaqueRef - The OpaqueRef handle to this template
    * @param      {Object}   xenAPI - An instance of XenAPI.
     */

    function Template(_session, _template, _opaqueRef, _xenAPI) {
      this.provision = bind(this.provision, this);
      this.pushOtherConfig = bind(this.pushOtherConfig, this);
      this.clone = bind(this.clone, this);
      this.toJSON = bind(this.toJSON, this);
      debug("constructor()");
      debug(_template, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_template) {
        throw Error("Must provide `template`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      if (!_xenAPI) {
        throw Error("Must provide `xenAPI`");
      }
      if (!(_template.is_a_template && !_template.is_control_domain && _template.uuid)) {
        throw Error("`template` does not describe a valid Template");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _template.uuid;
      this.name = _template.name_label;
      this.description = _template.name_description;
      this.VIFs = _template.VIFs || [];
      this.VBDs = _template.VBDs || [];
      this.other_config = _template.other_config;
      this.ram_minimum = _template.memory_static_max;
      this.vcpu_minimum = _template.VCPUs_max;
    }

    Template.prototype.toJSON = function() {
      return {
        name: this.name,
        description: this.description
      };
    };


    /**
     * Clone this Template, creates a new Template
     * @param     {String}  name - A name for the new clone
     * @return    {Promise}
     */

    Template.prototype.clone = function(name) {
      debug("clone()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!name) {
            return reject("Must provide a name for the clone");
          } else {
            return session.request("VM.clone", [_this.opaqueRef, name]).then(function(value) {
              debug(value);
              return xenAPI.templateCollection.findOpaqueRef(value).then(function(clonedTemplate) {
                return resolve(clonedTemplate);
              });
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          }
        };
      })(this));
    };

    Template.prototype.pushOtherConfig = function() {
      debug("pushOtherConfig()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM.set_other_config", [_this.opaqueRef, _this.other_config]).then(function(value) {
            debug(value);
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    Template.prototype.provision = function() {
      debug("provision()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM.provision", [_this.opaqueRef]).then(function(value) {
            debug(value);
            return xenAPI.vmCollection.findOpaqueRef(_this.opaqueRef).then(function(vm) {
              return resolve(vm);
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return Template;

  })();

  module.exports = Template;

}).call(this);
