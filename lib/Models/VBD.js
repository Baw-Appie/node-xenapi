// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VBD, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VBD');

  Promise = require('bluebird');

  VBD = (function() {
    var key, session, vbd, xenAPI;

    key = void 0;

    session = void 0;

    vbd = void 0;

    xenAPI = void 0;


    /**
    * Construct VBD.
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   vbd - A JSON object representing this VBD
    * @param      {String}   key - The OpaqueRef handle to this vbd
     */

    function VBD(_session, _vbd, _key, _xenAPI) {
      this.getOpaqueRef = bind(this.getOpaqueRef, this);
      this.push = bind(this.push, this);
      this.toJSON = bind(this.toJSON, this);
      debug("constructor()");
      debug(_vbd);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_vbd) {
        throw Error("Must provide `vbd`");
      }
      if (!_key) {
        throw Error("Must provide `key`");
      }
      session = _session;
      vbd = _vbd;
      key = _key;
      xenAPI = _xenAPI;
      this.uuid = vbd.uuid;
      this.VM = vbd.VM;
      this.VDI = vbd.VDI;
      this.userdevice = vbd.userdevice;
      this.mode = vbd.mode;
      this.type = vbd.type;
      this.empty = vbd.empty;
    }

    VBD.prototype.toJSON = function() {
      return {
        VM: this.VM,
        VDI: this.VDI,
        userdevice: this.userdevice,
        mode: this.mode,
        type: this.type,
        empty: this.empty,
        bootable: true,
        other_config: {},
        qos_algorithm_type: "",
        qos_algorithm_params: {}
      };
    };

    VBD.prototype.push = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VBD.create", [_this.toJSON()]).then(function(value) {
            debug(value);
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Return the OpaqueRef that represents this Template
     * @return     {String}
     */

    VBD.prototype.getOpaqueRef = function() {
      return key;
    };

    VBD.MODES = {
      RO: "RO",
      RW: "RW"
    };

    VBD.TYPES = {
      CD: "CD",
      DISK: "Disk"
    };

    return VBD;

  })();

  module.exports = VBD;

}).call(this);
