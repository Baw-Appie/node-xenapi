// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VDI, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VDI');

  Promise = require('bluebird');

  VDI = (function() {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
    * Construct VDI.
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   vdi - A JSON object representing this VDI
    * @param      {String}   opaqueRef - The OpaqueRef handle to this VDI
    * @param      {Object}   xenAPI - An instance of XenAPI.
     */

    function VDI(_session, _vdi, _opaqueRef, _xenAPI) {
      this.copy = bind(this.copy, this);
      debug("constructor()");
      debug(_vdi, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_vdi) {
        throw Error("Must provide `vdi`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _vdi.uuid;
      this.name = _vdi.name_label;
      this.description = _vdi.name_description;
      this.allowed_operations = _vdi.allowed_operations;
      this.SR = _vdi.SR;
    }

    VDI.prototype.copy = function(targetSR) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VDI.copy", [_this.opaqueRef, targetSR.opaqueRef]).then(function(value) {
            debug(value);
            return xenAPI.vdiCollection.findOpaqueRef(value).then(function(vdi) {
              return resolve(vdi);
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return VDI;

  })();

  module.exports = VDI;

}).call(this);
