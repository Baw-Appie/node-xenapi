// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VDI, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VDI');

  Promise = require('bluebird');

  VDI = (function() {
    var key, session, vdi, xenAPI;

    key = void 0;

    session = void 0;

    vdi = void 0;

    xenAPI = void 0;


    /**
    * Construct VBD.
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   vdi - A JSON object representing this VDI
    * @param      {String}   key - The OpaqueRef handle to this VDI
     */

    function VDI(_session, _vdi, _key, _xenAPI) {
      this.getOpaqueRef = bind(this.getOpaqueRef, this);
      debug("constructor()");
      debug(_vdi);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_vdi) {
        throw Error("Must provide `vdi`");
      }
      if (!_key) {
        throw Error("Must provide `key`");
      }
      session = _session;
      vdi = _vdi;
      key = _key;
      xenAPI = _xenAPI;
      this.uuid = vdi.uuid;
      this.name = vdi.name_label;
      this.description = vdi.name_description;
      this.allowed_operations = vdi.allowed_operations;
      this.SR = vdi.SR;
    }


    /**
     * Return the OpaqueRef that represents this VDI
     * @return     {String}
     */

    VDI.prototype.getOpaqueRef = function() {
      return key;
    };

    return VDI;

  })();

  module.exports = VDI;

}).call(this);
