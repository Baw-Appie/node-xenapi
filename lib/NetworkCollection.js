// Generated by CoffeeScript 1.9.1
(function() {
  var NetworkCollection, Promise, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:NetworkCollection');

  Promise = require('bluebird');

  _ = require('lodash');

  NetworkCollection = (function() {
    var Network, session;

    session = void 0;

    Network = void 0;


    /**
    	* Construct NetworkCollection
    	* @class
    	* @param      {Object}   session - An instance of Session
    	* @param      {Object}   Network - Dependency injection of the Network class.
     */

    function NetworkCollection(_session, _Network) {
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      } else {
        session = _session;
      }
      if (!_Network) {
        throw Error("Must provide Network");
      } else {
        Network = _Network;
      }
    }


    /**
    	 * List all Networks
    	 * @return     {Promise}
     */

    NetworkCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("network.get_all_records").then(function(value) {
            var Networks, createNetworkInstance;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            createNetworkInstance = function(network, key) {
              if (!(network.other_config && (network.other_config.is_guest_installer_network || network.other_config.is_host_internal_management_network))) {
                return new Network(session, network, key);
              }
            };
            Networks = _.map(value, createNetworkInstance);
            return resolve(_.filter(Networks, function(network) {
              return network;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return NetworkCollection;

  })();

  module.exports = NetworkCollection;

}).call(this);
