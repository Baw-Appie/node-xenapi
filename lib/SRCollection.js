// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, SRCollection, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:SRCollection');

  Promise = require('bluebird');

  _ = require('lodash');

  SRCollection = (function() {
    var SR, session;

    session = void 0;

    SR = void 0;


    /**
    * Construct SRCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   SR - Dependency injection of the SR class.
     */

    function SRCollection(_session, _SR) {
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      } else {
        session = _session;
      }
      if (!_SR) {
        throw Error("Must provide SR");
      } else {
        SR = _SR;
      }
    }


    /**
    * List all SRs
    * @return     {Promise}
     */

    SRCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("SR.get_all_records").then(function(value) {
            var SRs, createSRInstance;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            createSRInstance = function(sr, key) {
              return new SR(session, sr, key);
            };
            SRs = _.map(value, createSRInstance);
            return resolve(_.filter(SRs, function(sr) {
              return sr;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return SRCollection;

  })();

  module.exports = SRCollection;

}).call(this);
