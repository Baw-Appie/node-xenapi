// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, TaskCollection, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:TaskCollection');

  Promise = require('bluebird');

  _ = require('lodash');

  TaskCollection = (function() {
    var Task, session;

    session = void 0;

    Task = void 0;


    /**
    	* Construct TaskCollection
    	* @class
    	* @param      {Object}   session - An instance of Session
    	* @param      {Object}   Task - Dependency injection of the Task class.
     */

    function TaskCollection(_session, _Task) {
      this.show = bind(this.show, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      } else {
        session = _session;
      }
      if (!_Task) {
        throw Error("Must provide Task");
      } else {
        Task = _Task;
      }
    }


    /**
    	 * List all Tasks
    	 * @return     {Promise}
     */

    TaskCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("task.get_all_records").then(function(value) {
            var Tasks, createTaskInstance;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            createTaskInstance = function(task, key) {
              try {
                return new Task(session, task, key);
              } catch (_error) {
                return null;
              }
            };
            Tasks = _.map(value, createTaskInstance);
            return resolve(_.filter(Tasks, function(task) {
              return task;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
    	 * Show Task by UUID
    	 * @param		{String}	uuid - The UUID of the Task to show.
    	 * @return		{Promise}
     */

    TaskCollection.prototype.show = function(uuid) {
      debug("list(" + uuid + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("task.get_by_uuid", [uuid]).then(function(opaqueRef) {
            if (!opaqueRef) {
              reject();
            }
            return session.request("task.get_record", [opaqueRef]).then(function(task) {
              var newTask;
              if (!task) {
                reject();
              }
              debug(task);
              newTask = null;
              try {
                return newTask = new Task(session, task, opaqueRef);
              } finally {
                resolve(newTask);
              }
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return TaskCollection;

  })();

  module.exports = TaskCollection;

}).call(this);
