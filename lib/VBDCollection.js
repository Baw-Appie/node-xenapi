// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VBDCollection, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VBDCollection');

  Promise = require('bluebird');

  _ = require('lodash');

  VBDCollection = (function() {
    var VBD, session, xenAPI;

    session = void 0;

    VBD = void 0;

    xenAPI = void 0;


    /**
    * Construct VBDCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   VBD - Dependency injection of the VBD class.
     */

    function VBDCollection(_session, _VBD, _xenAPI) {
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_VBD) {
        throw Error("Must provide VBD");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      VBD = _VBD;
      xenAPI = _xenAPI;
    }


    /**
    * List all VBDs
    * @return     {Promise}
     */

    VBDCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VBD.get_all_records").then(function(value) {
            var VBDs, createVBDInstance;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            createVBDInstance = function(vbd, key) {
              return debug(vbd);
            };
            VBDs = _.map(value, createVBDInstance);
            return resolve(_.filter(VBDs, function(vbd) {
              return vbd;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VBDCollection.prototype.create = function(vm) {
      debug("create()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var newVBD, vbd;
          vbd = {
            VM: vm.getOpaqueRef(),
            VDI: "OpaqueRef:NULL",
            userdevice: "3",
            mode: VBD.MODES.RO,
            type: VBD.TYPES.CD,
            empty: true
          };
          newVBD = new VBD(session, vbd, "OpaqueRef:NULL");
          return resolve(newVBD);
        };
      })(this));
    };

    return VBDCollection;

  })();

  module.exports = VBDCollection;

}).call(this);
