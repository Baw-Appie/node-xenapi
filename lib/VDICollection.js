// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VDICollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VDICollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  VDICollection = (function() {
    var VDI, createVDIInstance, session, xenAPI;

    VDI = void 0;

    session = void 0;

    xenAPI = void 0;

    createVDIInstance = function(vdi, opaqueRef) {
      return new VDI(session, vdi, opaqueRef, xenAPI);
    };


    /**
    * Construct VDICollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   VDI - Dependency injection of the VBD class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function VDICollection(_session, _VDI, _xenAPI) {
      this.findSR = bind(this.findSR, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_VDI) {
        throw Error("Must provide VDI");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      VDI = _VDI;
    }


    /**
    * List all VDIs
    * @return     {Promise}
     */

    VDICollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VDI.get_all_records").then(function(value) {
            var VDIs;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            VDIs = _.map(value, createVDIInstance);
            return resolve(_.filter(VDIs, function(vdi) {
              return vdi;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VDICollection.prototype.findSR = function(SR) {
      debug("findSR(" + SR + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.list().then(function(VDIs) {
            var matches, vdiOnSR;
            vdiOnSR = function(vdi) {
              if (vdi.SR === SR) {
                return vdi;
              }
            };
            matches = _.map(VDIs, vdiOnSR);
            return resolve(_.filter(matches, function(vdi) {
              return vdi;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this))["catch"](function(e) {
        debug(e);
        return reject(e);
      });
    };

    return VDICollection;

  })();

  module.exports = VDICollection;

}).call(this);
