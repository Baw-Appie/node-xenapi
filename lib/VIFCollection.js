// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VIFCollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VIFCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  VIFCollection = (function() {
    var VIF, createVIFInstance, session, xenAPI;

    VIF = void 0;

    session = void 0;

    xenAPI = void 0;

    createVIFInstance = function(vif, opaqueRef) {
      return new VIF(session, vif, opaqueRef, xenAPI);
    };


    /**
    * Construct VIFCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   VIF - Dependency injection of the VIF class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function VIFCollection(_session, _VIF, _xenAPI) {
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_VIF) {
        throw Error("Must provide VIF");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      VIF = _VIF;
    }


    /**
    * List all VIFs
    * @return     {Promise}
     */

    VIFCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VIF.get_all_records").then(function(value) {
            var VIFs;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            VIFs = _.map(value, createVIFInstance);
            return resolve(_.filter(VIFs, function(vif) {
              return vif;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VIFCollection.prototype.create = function(network, vm) {
      debug("create()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var newVIF, vif;
          vif = {
            uuid: null,
            device: vm.VIFs.length.toString(),
            MAC: "",
            MTU: "1500",
            currently_attached: false,
            network: network.opaqueRef,
            VM: vm.opaqueRef
          };
          newVIF = new VIF(session, vif, "OpaqueRef:NULL", xenAPI);
          return resolve(newVIF);
        };
      })(this));
    };

    return VIFCollection;

  })();

  module.exports = VIFCollection;

}).call(this);
