// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VIFCollection, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VIFCollection');

  Promise = require('bluebird');

  _ = require('lodash');

  VIFCollection = (function() {
    var VIF, session;

    session = void 0;

    VIF = void 0;


    /**
    	* Construct VIFCollection
    	* @class
    	* @param      {Object}   session - An instance of Session
    	* @param      {Object}   VIF - Dependency injection of the VIF class.
     */

    function VIFCollection(_session, _VIF) {
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      } else {
        session = _session;
      }
      if (!_VIF) {
        throw Error("Must provide VIF");
      } else {
        VIF = _VIF;
      }
    }


    /**
    	* List all VIFs
    	* @return     {Promise}
     */

    VIFCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VIF.get_all_records").then(function(value) {
            var VIFs, createVIFInstance;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            createVIFInstance = function(vif, key) {
              return debug(vif);
            };
            VIFs = _.map(value, createVIFInstance);
            return resolve(_.filter(VIFs, function(vif) {
              return vif;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VIFCollection.prototype.create = function(network, vm) {
      var vif;
      debug("create()");
      vif = {
        uuid: null,
        device: vm.VIFs.length.toString(),
        MAC: "",
        MTU: "1500",
        currently_attached: false,
        network: network.getOpaqueRef(),
        VM: vm.getOpaqueRef()
      };
      return new VIF(session, vif, "OpaqueRef:NULL");
    };

    return VIFCollection;

  })();

  module.exports = VIFCollection;

}).call(this);
