// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, VMCollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VMCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  VMCollection = (function() {
    var VM, createVMInstance, session, xenAPI;

    VM = void 0;

    session = void 0;

    xenAPI = void 0;

    createVMInstance = function(vm, opaqueRef) {
      try {
        return new VM(session, vm, opaqueRef, xenAPI);
      } catch (_error) {
        return null;
      }
    };


    /**
    * Construct VMCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   VM - Dependency injection of the VM class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function VMCollection(_session, _VM, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.createVM = bind(this.createVM, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_VM) {
        throw Error("Must provide VM");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      VM = _VM;
    }


    /**
     * List all VMs
     * @return     {Promise}
     */

    VMCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM.get_all_records").then(function(value) {
            var VMs;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            VMs = _.map(value, createVMInstance);
            return resolve(_.filter(VMs, function(vm) {
              return vm;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VMCollection.prototype.createVM = function(ram, cpuCount, label) {
      debug("createVM()");
      if (!ram) {
        throw Error("Must provide RAM specification");
      }
      if (!cpuCount) {
        throw Error("Must provide CPU specification");
      }
      if (!label) {
        throw Error("Must provide label");
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var config, extraConfig, memoryValue, vCPUMax;
          memoryValue = ram * 1048576;
          vCPUMax = cpuCount;
          extraConfig = {
            name_label: label,
            memory_static_max: memoryValue.toString(),
            memory_static_min: memoryValue.toString(),
            memory_dynamic_max: memoryValue.toString(),
            memory_dynamic_min: memoryValue.toString(),
            VCPUs_max: vCPUMax.toString()
          };
          config = _.extend(VM.DEFAULT_CONFIG, extraConfig);
          return session.request("VM.create", [config]).then(function(value) {
            if (!value) {
              reject();
            }
            return _this.findOpaqueRef(value).then(function(vm) {
              return resolve(vm);
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VMCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM.get_record", [opaqueRef]).then(function(value) {
            var vm;
            if (!value) {
              reject();
            }
            vm = createVMInstance(value, opaqueRef);
            return resolve(vm);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return VMCollection;

  })();

  module.exports = VMCollection;

}).call(this);
