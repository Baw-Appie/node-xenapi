// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, chai, chaiAsPromised, expect, sinon, sinonChai;

  chai = require('chai');

  chaiAsPromised = require('chai-as-promised');

  expect = chai.expect;

  sinon = require('sinon');

  sinonChai = require('sinon-chai');

  Promise = require('bluebird');

  chai.use(sinonChai);

  chai.use(chaiAsPromised);

  describe("VM", function() {
    var VM, session;
    session = void 0;
    VM = void 0;
    beforeEach(function() {
      session = {
        request: function() {}
      };
      return VM = require('../../lib/Models/VM');
    });
    return describe("constructor", function() {
      var key, validVM;
      validVM = void 0;
      key = void 0;
      beforeEach(function() {
        validVM = {
          uuid: 'abcd',
          is_a_template: false,
          is_control_domain: false
        };
        return key = 'OpaqueRef:abcd';
      });
      afterEach(function() {});
      it("should throw unless session is provided", function() {
        return expect(function() {
          return new VM();
        }).to["throw"](/Must provide `session`/);
      });
      it("should throw unless vm is provided", function() {
        return expect(function() {
          return new VM(session);
        }).to["throw"](/Must provide `vm`/);
      });
      it("should throw if vm does not have a UUID", function() {
        return expect(function() {
          return new VM(session, {
            is_a_template: false,
            is_control_domain: false
          });
        }).to["throw"](/`vm` does not describe a valid VM/);
      });
      it("should throw if vm is a template", function() {
        return expect(function() {
          return new VM(session, {
            uuid: 'abcd',
            is_a_template: true,
            is_control_domain: false
          });
        }).to["throw"](/`vm` does not describe a valid VM/);
      });
      it("should throw if vm is a control domain", function() {
        return expect(function() {
          return new VM(session, {
            uuid: 'abcd',
            is_a_template: false,
            is_control_domain: true
          });
        }).to["throw"](/`vm` does not describe a valid VM/);
      });
      it("should throw unless key is provided", function() {
        return expect(function() {
          return new VM(session, validVM);
        }).to["throw"](/Must provide `key`/);
      });
      it("should assign the passed uuid to `uuid` property", function() {
        var vm, vmTemplate;
        vmTemplate = validVM;
        vmTemplate.uuid = 'abcd';
        vm = new VM(session, vmTemplate, key);
        return expect(vm.uuid).to.equal(vmTemplate.uuid);
      });
      it("should assign the passed label to `name` property", function() {
        var vm, vmTemplate;
        vmTemplate = validVM;
        vmTemplate.name_label = 'abcd';
        vm = new VM(session, vmTemplate, key);
        return expect(vm.name).to.equal(vmTemplate.name_label);
      });
      it("should assign the passed description to `description` property", function() {
        var vm, vmTemplate;
        vmTemplate = validVM;
        vmTemplate.name_description = 'abcd';
        vm = new VM(session, vmTemplate, key);
        return expect(vm.description).to.equal(vmTemplate.name_description);
      });
      it("should set the `xenToolsInstalled` property based on whether guest_metrics are available", function() {
        var vm, vmTemplate;
        vmTemplate = validVM;
        vmTemplate.guest_metrics = 'OpaqueRef:NULL';
        vm = new VM(session, vmTemplate, key);
        expect(vm.xenToolsInstalled).to.equal(false);
        vmTemplate.guest_metrics = 'OpaqueRef:abcd';
        vm = new VM(session, vmTemplate, key);
        return expect(vm.xenToolsInstalled).to.equal(true);
      });
      return it("should assign the passed power state to `powerState` property", function() {
        var vm, vmTemplate;
        vmTemplate = validVM;
        vmTemplate.power_state = 'abcd';
        vm = new VM(session, vmTemplate, key);
        return expect(vm.powerState).to.equal(vmTemplate.power_state);
      });
    });
  });

}).call(this);
