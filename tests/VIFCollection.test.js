// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, chai, chaiAsPromised, expect, sinon, sinonChai;

  chai = require('chai');

  chaiAsPromised = require('chai-as-promised');

  expect = chai.expect;

  sinon = require('sinon');

  sinonChai = require('sinon-chai');

  Promise = require('bluebird');

  chai.use(sinonChai);

  chai.use(chaiAsPromised);

  describe("VIFCollection", function() {
    var VIF, VIFCollection, XenAPI, session;
    session = void 0;
    VIFCollection = void 0;
    VIF = void 0;
    XenAPI = void 0;
    beforeEach(function() {
      session = {
        request: function() {}
      };
      VIFCollection = require('../lib/VIFCollection');
      VIF = require('../lib/Models/VIF');
      return XenAPI = {
        'session': session
      };
    });
    describe("constructor", function() {
      beforeEach(function() {});
      afterEach(function() {});
      it("should throw unless session is provided", function() {
        return expect(function() {
          return new VIFCollection();
        }).to["throw"](/Must provide session/);
      });
      it("should throw unless VIF is provided", function() {
        return expect(function() {
          return new VIFCollection(session);
        }).to["throw"](/Must provide VIF/);
      });
      return it("should throw unless XenAPI is provided", function() {
        return expect(function() {
          return new VIFCollection(session, VIF);
        }).to["throw"](/Must provide xenAPI/);
      });
    });
    return describe("list()", function(done) {
      var requestStub, vifCollection;
      requestStub = void 0;
      vifCollection = void 0;
      beforeEach(function() {
        requestStub = sinon.stub(session, "request", function() {
          return new Promise(function(resolve, reject) {
            return resolve([]);
          });
        });
        return vifCollection = new VIFCollection(session, VIF, XenAPI);
      });
      afterEach(function() {
        return requestStub.restore();
      });
      it("should call `VIF.get_all_records` on the API", function(done) {
        return vifCollection.list().then(function() {
          expect(requestStub).to.have.been.calledWith("VIF.get_all_records");
          return done();
        })["catch"](function(e) {
          return done(e);
        });
      });
      it("should resolve if the API call is successful", function(done) {
        var promise;
        promise = vifCollection.list();
        return expect(promise).to.eventually.be.fulfilled.and.notify(done);
      });
      it("should reject if the API call resolves with undefined", function(done) {
        var promise;
        requestStub.restore();
        requestStub = sinon.stub(session, "request", function() {
          return new Promise(function(resolve, reject) {
            return resolve();
          });
        });
        promise = vifCollection.list();
        return expect(promise).to.eventually.be.rejected.and.notify(done);
      });
      it("should reject if the API call fails", function(done) {
        var promise;
        requestStub.restore();
        requestStub = sinon.stub(session, "request", function() {
          return new Promise(function(resolve, reject) {
            return reject();
          });
        });
        promise = vifCollection.list();
        return expect(promise).to.eventually.be.rejected.and.notify(done);
      });
      return it("should resolve with an empty array if the API returns nothing", function(done) {
        return vifCollection.list().then(function(vms) {
          expect(vms).to.deep.equal([]);
          return done();
        })["catch"](function(e) {
          return done(e);
        });
      });
    });
  });

}).call(this);
